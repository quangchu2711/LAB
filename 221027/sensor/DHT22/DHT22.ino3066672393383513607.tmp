#include <WiFi.h>
#include <PubSubClient.h>
#include "DHT.h"
#include "ArduinoJson.h"

uint32_t chipId = 0;
unsigned long lastMsg = 0;

String mq_telegramtx;
String mq_telegramrx;
String device_on;

const char* ssid = "Xuong_1";
const char* password = "68686868";

#define MQTT_SERVER "192.168.0.102"
#define MQTT_PORT 1883
#define MQTT_USER "nmtam"
#define MQTT_PASSWORD "221220"
#define CONNECT_TOPIC "xuong/device/announce"
#define MQTT_TOPIC_CMD "xuong/device/+/led/cmd"

#define SENSOR_DEVICE_SRC_TOPIC  "xuong/device/kitchen/sensor/status"
#define SENSOR_DEVICE_DST_TOPIC  "xuong/device/telegram/sensor/cmd"

#define DHTPIN 4
#define DHTTYPE DHT22

DHT dht(DHTPIN, DHTTYPE);  
WiFiClient wifiClient;
PubSubClient client(wifiClient);

void publishData(float temperature, float humidity) {
  /*
     {
        "temperature": "23.20" ,
        "humidity": "43.70"
     }
  */
  char buffer[100] = {0};
  sprintf(buffer, "{\"temperature\": %0.2f, \"humidity\": %0.2f}", temperature, humidity);
  client.publish(MQTT_TOPIC_sensors, buffer, true);
  Serial.println(buffer);
}

void create_topic(){
  for(int i=0; i<17; i=i+8) {
    chipId |= ((ESP.getEfuseMac() >> (40 - i)) & 0xff) << i;
  }
  mq_sensors = "xuong/device/esp" + String(chipId) + "/sensors";
  mq_telegramtx = mq_sensors + "/telegram/tx";
  mq_telegramrx = mq_sensors + "/telegram/rx";
  MQTT_TOPIC_sensors = mq_sensors.c_str();
  MQTT_TOPIC_telegramtx = mq_telegramtx.c_str();
  MQTT_TOPIC_telegramrx = mq_telegramrx.c_str();
  Serial.println(MQTT_TOPIC_sensors);
  Serial.println(MQTT_TOPIC_telegramtx);
  Serial.println(MQTT_TOPIC_telegramrx);
}

void setup_wifi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());
  device_on = "esp"+ String(chipId);
  Serial.println( device_on +" is online" );
}

void connect_to_broker() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    String clientId = "ESP32";
    clientId += String(random(0xffff), HEX);
    if (client.connect(clientId.c_str(), MQTT_USER, MQTT_PASSWORD)) {
      Serial.println("connected");
      client.subscribe(MQTT_TOPIC_CMD);
      client.subscribe(SENSOR_DEVICE_DST_TOPIC);
      client.publish(CONNECT_TOPIC, (device_on +" is online").c_str());
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 2 seconds");
      delay(2000);
    }
  }
}
 
void callback(char* topic, byte *payload, unsigned int length) {  
  Serial.println("-------new topicMsg from broker-----");
  Serial.print("topic: ");
  Serial.println(topic);
  Serial.print("topicMsg: ");
  char statusMsg[length+1];
  memcpy(statusMsg, payload, length);
  statusMsg[length] = NULL;
  String topicMsg(statusMsg);
  Serial.println();
  Serial.println(topicMsg);
  if(String(topic) == SENSOR_DEVICE_DST_TOPIC)
  {
    if(topicMsg == "KITCHEN_TEMP")
    {
      float t = dht.readTemperature();
      client.publish(SENSOR_DEVICE_SRC_TOPIC, (String(t)+" Â°C").c_str());
    }
  }    
}
void setup() {
  Serial.begin(115200);
  dht.begin();
  create_topic();
  Serial.setTimeout(500);
  setup_wifi();
  client.setServer(MQTT_SERVER, MQTT_PORT);
  client.setCallback(callback);
  connect_to_broker();
  Serial.println("Start transfer");
}

void loop() {
  client.loop();
  if (!client.connected()) {
    connect_to_broker();
  }
}
